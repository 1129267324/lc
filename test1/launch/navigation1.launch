<!--基于真实车辆autolabor与velodyne分别替换仿真中数据进行仿真，注意：小车串口权限必须启动，否则么有odom与map间的tf变换-->
<launch>
    <param name="use_sim_time" value="false" />
	<arg name="model" />
	<arg name="gui" default="False" />
    <param name="use_gui" value="$(arg gui)"/>
    <!--运行"joint_state_publisher节点，发布机器人的关节状态-->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
 <!--运行robot_state_publisher节点，发布tf-->
 <!--该节点解析urdf文件后，将各个frame的状态发布给tf，因此在rviz中就可以看到各个frame间的tf转换-->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

    <!--<param name="robot_description" textfile="$(find smartcar_description)/urdf/smartcar.urdf" />-->
    <!--<param name="robot_description" textfile="$(find smartcar_description)/urdf/autolabor_description.urdf" />-->
    <!--<param name="robot_description" textfile="$(find autolabor_description)/urdf/autolabor_description.urdf" />-->
    <param name="robot_description" textfile="$(find autolabor_description)/urdf/autolabor_pro1.urdf" />
    <!--<node pkg="test" type="hello" name="hello" output="screen"></node>-->
    <!--加入rviz，并且导入其默认配置-->
   <node pkg="rviz"  type="rviz"  name="rviz"  required="true" args="-d $(find smartcar_description)/urdf/lc_1.rviz" />
   <!--<node pkg="rviz"  type="rviz"  name="rviz"   />-->
   <!--j加入地图-->
   <node pkg="map_server"  type="map_server"  name="map_server"  args="$(find test)/maps/lc_map.yaml" />
    <!--j加入地图-->
     <!--<node pkg="map_server"  type="map_server"  name="map_server"  args="$(find test)/maps/map.yaml" />-->
    <!--<node pkg="map_server"  type="map_server"  name="map_server"  args="$(find test)/maps/MG_map.yaml" />-->
 
<!--仿真中用以下模拟激光雷达与模拟驱动小车行走模块进行仿真-->
<!--模拟雷达数据的输出-->
   <!--<node pkg="lidar_simulation" type="lidar_simulation" name="lidar" output="screen">
      <param name="min_angle"  value="-3.141592653"/>
      <param name="max_angle"  value="3.141592653" />
      <param name="min_distance" value="0.15" />
      <param name="max_distance" value="6.50" />
      <param name="size" value="400"/>
      <param name="global_frame" value="odom"/>
      <param name="lidar_frame" value="lidar"/>
    </node>-->
    <!--传递/cmd_vel给建立的小车模型，驱动其行走-->
     <!--<node pkg="autolabor_fake" type="autolabor_fake_node" name="autolabor_driver" >
      <remap from="/autolabor/cmd_vel" to="cmd_vel" />
      <remap from="/autolabor/odom" to="odom" />
      <param name="cmd_timeout" value="0.5" />
    </node>-->
<!--<node pkg="rqt_reconfigure" type="rqt_reconfigure" name="rqt_reconfigure" output="screen" />-->
   <!--运行move_base节点-->
   <include file="$(find test)/launch/move_base1.launch" />
    <!--<include file="$(find test)/launch/move_base_odom.launch" />-->

    <!--运行move_base节点-->
   <!--基于map与amcl下的配置文件，直接基于fixed frame为map下的配置文件，参考本人模拟仿真资料-->
   <!--<include file="$(find test)/launch/move_base1.launch" />-->
   <!--直接基于fixed frame为odom下的配置文件，参考范博士资料-->
   <!--<include file="$(find test)/launch/move_base_odom.launch" />-->
<!--直接基于本人amcl配置文件进行调试-->
<!--<include file="$(find test)/launch/move_base_lc.launch" />-->
     <!--运行amcl节点-->
<include file="$(find test)/launch/amcl.launch" />
  <!--运行autolabor ros驱动节点，用真实机器人代替模拟仿真的机器人的驱动程序,-->
   <include file="$(find autolabor_pro1_driver)/launch/driver.launch" />
 <!--加入真实激光雷达数据-->
    <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />
     <!--<include file="$(find rplidar_ros)/launch/rplidar.launch" />-->
<!--加入速度平滑滤波算法-->
    <include file="$(find yocs_velocity_smoother)/launch/velocity_smoother.launch" />
    <!--进行tf转换-->
    <!--<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="-20 10.0 40 0.0 0.0 0.0 /base_link /velodyne 10" />-->
    <!--<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.0 0.0 0.20 0.0 0.0 0.0 /base_link /lidar 10" />-->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0.38 0.0 0.0 0.0 /base_link /velodyne 10" />
    
</launch>

