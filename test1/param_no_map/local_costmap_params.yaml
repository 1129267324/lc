# ns : local_costmap

# The global frame for the costmap to operate in. (string, default: "/map")
global_frame: odom

# The name of the frame for the base link of the robot.(string, default: "base_link")
robot_base_frame: base_link

# distance a circular robot should be clear of the obstacle (kobuki: 0.18)
#robot_radius: 0.20  
footprint:  [[0.40, 0.35], [0.40, -0.35], [-0.40, -0.35], [-0.40, 0.35]] # if the robot is not circular

# used for obstacle_layer, 3D->voxel 2D->other
map_type: costmap

# Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot.(double, default: 0.2)
transform_tolerance: 0.5

# The frequency in Hz for the map to be updated.(double, default: 5.0)
update_frequency: 5.0

# The frequency in Hz for the map to be publish display information.(double, default: 0.0)
# 地图发布显示信息的频率(以赫兹为单位)。(双,默认值:0.0)，将1.0修改为10.0
publish_frequency: 10.0  #1.0

# Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false. (bool, default: false)
rolling_window: true
static_map: false

# If true the full costmap is published to "~<name>/grid" every update. If false only the part of the costmap that has changed is published on the "~<name>/grid_updates" topic. (bool, default: false)
always_send_full_costmap: false

# Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields. The name is used to define the parameter namespace for the plugin.
plugins:
  - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# The width of the map in meters.(int, default: 10)
width: 50.0

# The height of the map in meters.(int, default: 10)
height: 50.0

# The resolution of the map in meters/cell. (double, default: 0.05)
# 此处进行了修改
resolution: 0.05   #0.1   #0.05

# The x origin of the map in the global frame in meters. (double, default: 0.0)
origin_x: 0.0

# The y origin of the map in the global frame in meters. (double, default: 0.0)
origin_y: 0.0

#############################
#
#        inflation_layer
#
#############################
inflation_layer:
# The radius in meters to which the map inflates obstacle cost values. (double, default: 0.55)
# 机器人与障碍物保持的最小距离，inflation_radius:膨胀半径，膨胀层会把障碍物代价膨胀直到该半径为止，一般将该值设置为机器人底盘的直径大小。
# 在这里，我们设置机器人的占用面积或机器人的半径是圆形。在指定占地面积的情况下，假设机器人的中心处于（0.0,0.0），并且支持顺时针和逆时针规格。
# 我们还将设定代价地图的膨胀半径。膨胀半径应设定为在代价地图的与障碍物保持安全的最大距离。例如，将膨胀半径设定为0.55米，意味着机器人针对相同的障碍物获取的所有路径都保持距离障碍物0.55米或更远。
# 如果你的机器人不能很好地通过窄门或其它狭窄的地方，则稍微减小这个值，相反地，如果机器人不断地撞到东西，则尝试增大这个值。
  inflation_radius: 0.30   # 多将该值设置为机器人底盘的直径大小

# A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values. (double, default: 10.0)
  cost_scaling_factor: 10.0

#############################
#
#      obstacle_layer
#
#############################
obstacle_layer:
# The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot. (double, default: 2.0)
  max_obstacle_height: 2.0
# The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis. (double, default: 2.5)
   # 机器人监测障碍物的最大范围，若设置为2.5，则表示2.5m范围内检测到的障碍物信息才会在地图中进行更新 
  obstacle_range: 3.0
# The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis. (double, default: 3.0)
     # 设置机器人检测自由空间的最大范围，若设置为3，表示3m范围内，机器人将根据传感器信息清除范围内的自由空间
   # 这个范围内不存在的障碍物都会被清除
  raytrace_range: 4.0
# If false, each pixel has one of 2 states: lethal obstacle or free. If true, each pixel has one of 3 states: lethal obstacle, free, or unknown.  (bool, default: false)
  # 此处若设置为false,那么地图上代价值就只分为致命碰撞与自由区域两种
# 设置为true，就表示分为致命碰撞，自由区域，未知区域三种
# 若需要将一些未探索的未知区域也参与到路径规划，就将其设置为false，不过一般是true
  track_unknown_space: false
# If true, the robot footprint will clear (mark as free) the space in which it travels. (bool, default: true)
  footprint_clearing_enabled: true
# A list of observation source names separated by spaces. This defines each of the <source_name> namespaces defined below. (string, default: "")
  observation_sources: scan
# scan: {data_type: LaserScan, topic: /scan, marking: true, clearing: true, expected_update_rate: 0, inf_is_valid: true}  
  scan:
# The topic on which sensor data comes in for this source. Defaults to the name of the source. (string, default: source_name)
    topic: velodyne_points  #/velodyne_points  #scan
# The frame of the origin of the sensor. Leave empty to attempt to read the frame from sensor data. The frame can be read from both sensor_msgs/LaserScan, sensor_msgs/PointCloud, and sensor_msgs/PointCloud2 messages. (string, default: "")
    sensor_frame: ""
# How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading. (double, default: 0.0)
    observation_persistence: 0.0
# How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency. (double, default: 0.0)
    expected_update_rate: 0.0
# The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported. (string, default: "PointCloud")
    data_type: PointCloud2 #PointCloud2 # LaserScan
# Whether or not this observation should be used to clear out freespace.  (bool, default: false)
    clearing: true
# Whether or not this observation should be used to mark obstacles. (bool, default: true)
    marking: true
# The maximum height in meters of a sensor reading considered valid. This is usually set to be slightly higher than the height of the robot. Setting this parameter to a value greater than the global max_obstacle_height parameter has no effect. Setting this parameter to a value less than the global max_obstacle_height will filter out points from this sensor above that height.(double, default: 2.0)
    max_obstacle_height: 2.0
# The minimum height in meters of a sensor reading considered valid. This is usually set to be at ground height, but can be set higher or lower based on the noise model of your sensor. (double, default: 0.0)
    min_obstacle_height: 0.0
# The maximum range in meters at which to insert obstacles into the costmap using sensor data.  (double, default: 2.5)
    obstacle_range: 5  #3.0
# The maximum range in meters at which to raytrace out obstacles from the map using sensor data.  (double, default: 3.0)
    raytrace_range: 5  #4.0
# Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.  (bool, default: false)
    inf_is_valid: true

