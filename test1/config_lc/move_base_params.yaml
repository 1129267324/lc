# 算法介绍
#全局路径的规划插件包括：——该插件是由官方实现的，后期可以插件形式加入自己改进的算法
# navfn:ROS中比较旧的代码实现了dijkstra和A*全局规划算法。
# global_planner:重新实现了Dijkstra和A*全局规划算法,可以看作navfn的改进版。
# parrot_planner:一种简单的算法实现全局路径规划算法。
#   base_global_planner:指定用于move_base的全局规划器插件名称.
base_global_planner: "global_planner/GlobalPlanner"
# 局部路径的规划插件包括：——该插件是由官方实现的，后期可以插件形式加入自己改进的算法
# base_local_planner:实现了Trajectory Rollout和DWA两种局部规划算法。
# dwa_local_planner:实现了DWA局部规划算法，可以看作是base_local_planner的改进版本。
#   base_local_planner:指定用于move_base的局部规划器插件名称.
base_local_planner: "dwa_local_planner/DWAPlannerROS"

#   planner_frequency:全局规划操作的执行频率.如果设置为0.0,则全局规划器仅
#   在接收到新的目标点或者局部规划器报告路径堵塞时才会重新执行规划操作.
planner_frequency: 1   #2.0

#   controller_frequency:向底盘控制移动话题cmd_vel发送命令的频率.
controller_frequency: 5

#   controller_patience:在空间清理操作执行前,控制器花多长时间等有效控制下发.
controller_patience: 3  #5.0


# move_base软件包的通用配置参数,现在依次解释每个参数意义:
#   shutdown_costmaps:当move_base在不活动状态时,是否关掉costmap(bool, default: false).
shutdown_costmaps: false



#   planner_patience:在空间清理操作执行前,留给规划器多长时间来找出一条有效规划.
planner_patience: 1 #5.0
#   oscillation_timeout:执行修复机制前,允许振荡的时长.
oscillation_timeout: 3 # 8
# oscillation_distance:来回运动在多大距离以上不会被认为是振荡.
oscillation_distance: 0.3


# base_global_planner: "navfn/NavfnROS"
# base_local_planner: "dwa_local_planner/DWAPlannerROS"


 

# recovery_behavior:
#    sim_granularity: 6.28  
#    frequency: 20.0  
#首先，机器人清扫地图，无关紧要的障碍就不处理了。然后，机器人会原地转圈来搞清楚自己处境。如果这个失败，
#机器人会变得更勇敢地clear its map, 移除矩形区域以外的所有的障碍，而这个矩形区域是它可以在其中原地转圈的区域。接下来就是另一个原地转圈。
#如果上述所有步骤都失败了，机器人可能会考虑它的目标达不到了并通知用户任务失败。
 
# recovery_behaviors:
#   - {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery} 
#   - {name: rotate_recovery, type: rotate_recovery/RotateRecovery} 
#   - {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
#  recovery_behavior_enabled: true
#确定机器人在尝试清理空间时是否尝试原地旋转。注意:此参数仅在使用默认恢复行为时使用，这意味着用户还没有将recovery_behavior参数设置为任何自定义值。
  # clearing_rotation_allowed: true
  # clearing_rotation_allowed: false


conservative_reset:
# The radius away from the robot in meters outside which obstacles will be removed from the costmaps when they are reverted to the static map.
  #在距离机器人几米的范围内，当障碍物返回到静态地图时，将从成本图中移除。
    reset_distance:  1.0

    aggressive_reset:
# The radius away from the robot in meters outside which obstacles will be removed from the costmaps when they are reverted to the static map.
   #在距离机器人几米的范围内，当障碍物返回到静态地图时，将从成本图中移除。
    reset_distance:  0  #1.0